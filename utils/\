from utils.tools import mdotl
from scipy.stats import norm
from numpy import *
import math
import matplotlib.pyplot as plt

def draw_curve(f, xset, yset, w=None, filename=None):
        """
        Plot baisi Function(green line),
        Regression Function(red line),
        Training data(blue points, default zeros)
        """
        step = linspace(0, 1, 100)
        regression = [
                x 
                for x in (sum([w[i]*x**i for i in range(len(w))]) for x in step)
        ]
        basis = list(map(f, step))

        plt.figure()
        plt.subplot(111)
        plt.xlim(0, 1)
        plt.ylim(-1.5, 1.5)
        plt.scatter(xset, yset, c = 'b')
        plt.plot(step, basis, c = 'g')
        plt.plot(step, regression, c = 'r')

        if filename:
                plt.savefig(filename)
        plt.show()

def draw_gauss(f, xset, yset, w, SD, beta, filename=None):
	def std(x):
		psi = array([w[i]*x**i for i in range(len(w))])
		std = (1/beta + mdotl(psi.T, SD, psi))**0.5
		return std
        step = linspace(0, 1, 100)
        regression = [
                x
                for x in (sum([w[i]*x**i for i in range(len(w))]) for x in step)
        ]
	std = list(map(std, step))
	#x = linspace(0, 1, 10)
	#y = linspace(-1.5, 1.5, 15)
	#X, Y = meshgrid(x, y)
        basis = list(map(f, step))

	Y = norm(regression, std).interval(0.95)
	print(Y)
	#Z = array([list(map(norm_prob, X[i], Y[i])) for i in range(len(X))])
	plt.figure()
        plt.subplot(111)
        plt.xlim(0, 1)
        plt.ylim(-1.5, 1.5)
	plt.scatter(xset, yset, c = 'b')
        plt.plot(step, basis, c = 'g')
	plt.plot(step, regression, c = 'r')
	#plt.contourf(X, Y, Z, 128)#, alpha=.75, cmap=cm.hot)
	plt.fill_between(step, Y, -Y)
	
        if filename:
                plt.savefig(filename)
        plt.show()


